// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensorupload.proto

package ch.ethz.soms.nervous.nervousproto;

public final class SensorUploadProtos {
  private SensorUploadProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SensorUploadOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 huuid = 1;
    /**
     * <code>required uint64 huuid = 1;</code>
     *
     * <pre>
     * Unique application UUID
     * High bits
     * </pre>
     */
    boolean hasHuuid();
    /**
     * <code>required uint64 huuid = 1;</code>
     *
     * <pre>
     * Unique application UUID
     * High bits
     * </pre>
     */
    long getHuuid();

    // required uint64 luuid = 2;
    /**
     * <code>required uint64 luuid = 2;</code>
     *
     * <pre>
     * Low bits
     * </pre>
     */
    boolean hasLuuid();
    /**
     * <code>required uint64 luuid = 2;</code>
     *
     * <pre>
     * Low bits
     * </pre>
     */
    long getLuuid();

    // required uint64 upload_time = 3;
    /**
     * <code>required uint64 upload_time = 3;</code>
     *
     * <pre>
     * Timestamp of the upload. Used for router-side time correction
     * </pre>
     */
    boolean hasUploadTime();
    /**
     * <code>required uint64 upload_time = 3;</code>
     *
     * <pre>
     * Timestamp of the upload. Used for router-side time correction
     * </pre>
     */
    long getUploadTime();

    // required uint64 sensor_id = 4;
    /**
     * <code>required uint64 sensor_id = 4;</code>
     *
     * <pre>
     * Sensor Type
     * </pre>
     */
    boolean hasSensorId();
    /**
     * <code>required uint64 sensor_id = 4;</code>
     *
     * <pre>
     * Sensor Type
     * </pre>
     */
    long getSensorId();

    // repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    java.util.List<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData> 
        getSensorValuesList();
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData getSensorValues(int index);
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    int getSensorValuesCount();
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    java.util.List<? extends ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder> 
        getSensorValuesOrBuilderList();
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder getSensorValuesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code nervousproto.SensorUpload}
   *
   * <pre>
   * This message is used to upload sensor data for collection purposes to a nervous router
   * </pre>
   */
  public static final class SensorUpload extends
      com.google.protobuf.GeneratedMessage
      implements SensorUploadOrBuilder {
    // Use SensorUpload.newBuilder() to construct.
    private SensorUpload(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorUpload(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorUpload defaultInstance;
    public static SensorUpload getDefaultInstance() {
      return defaultInstance;
    }

    public SensorUpload getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorUpload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              huuid_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              luuid_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              uploadTime_ = input.readUInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              sensorId_ = input.readUInt64();
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                sensorValues_ = new java.util.ArrayList<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData>();
                mutable_bitField0_ |= 0x00000010;
              }
              sensorValues_.add(input.readMessage(ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          sensorValues_ = java.util.Collections.unmodifiableList(sensorValues_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.class, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.Builder.class);
    }

    public static com.google.protobuf.Parser<SensorUpload> PARSER =
        new com.google.protobuf.AbstractParser<SensorUpload>() {
      public SensorUpload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorUpload(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SensorUpload> getParserForType() {
      return PARSER;
    }

    public interface SensorDataOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required uint64 record_time = 1;
      /**
       * <code>required uint64 record_time = 1;</code>
       */
      boolean hasRecordTime();
      /**
       * <code>required uint64 record_time = 1;</code>
       */
      long getRecordTime();

      // repeated bool value_bool = 2 [packed = true];
      /**
       * <code>repeated bool value_bool = 2 [packed = true];</code>
       */
      java.util.List<java.lang.Boolean> getValueBoolList();
      /**
       * <code>repeated bool value_bool = 2 [packed = true];</code>
       */
      int getValueBoolCount();
      /**
       * <code>repeated bool value_bool = 2 [packed = true];</code>
       */
      boolean getValueBool(int index);

      // repeated int32 value_int32 = 3 [packed = true];
      /**
       * <code>repeated int32 value_int32 = 3 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getValueInt32List();
      /**
       * <code>repeated int32 value_int32 = 3 [packed = true];</code>
       */
      int getValueInt32Count();
      /**
       * <code>repeated int32 value_int32 = 3 [packed = true];</code>
       */
      int getValueInt32(int index);

      // repeated int64 value_int64 = 4 [packed = true];
      /**
       * <code>repeated int64 value_int64 = 4 [packed = true];</code>
       */
      java.util.List<java.lang.Long> getValueInt64List();
      /**
       * <code>repeated int64 value_int64 = 4 [packed = true];</code>
       */
      int getValueInt64Count();
      /**
       * <code>repeated int64 value_int64 = 4 [packed = true];</code>
       */
      long getValueInt64(int index);

      // repeated float value_float = 5 [packed = true];
      /**
       * <code>repeated float value_float = 5 [packed = true];</code>
       */
      java.util.List<java.lang.Float> getValueFloatList();
      /**
       * <code>repeated float value_float = 5 [packed = true];</code>
       */
      int getValueFloatCount();
      /**
       * <code>repeated float value_float = 5 [packed = true];</code>
       */
      float getValueFloat(int index);

      // repeated double value_double = 6 [packed = true];
      /**
       * <code>repeated double value_double = 6 [packed = true];</code>
       */
      java.util.List<java.lang.Double> getValueDoubleList();
      /**
       * <code>repeated double value_double = 6 [packed = true];</code>
       */
      int getValueDoubleCount();
      /**
       * <code>repeated double value_double = 6 [packed = true];</code>
       */
      double getValueDouble(int index);

      // repeated string value_string = 7;
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      java.util.List<java.lang.String>
      getValueStringList();
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      int getValueStringCount();
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      java.lang.String getValueString(int index);
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      com.google.protobuf.ByteString
          getValueStringBytes(int index);
    }
    /**
     * Protobuf type {@code nervousproto.SensorUpload.SensorData}
     *
     * <pre>
     * This message is used to store the actual sensor data.
     * Ordering, count and meaning of the values is defined by the nervous system.
     * This is not very nice, but protobuf packing makes it efficient either way.
     * </pre>
     */
    public static final class SensorData extends
        com.google.protobuf.GeneratedMessage
        implements SensorDataOrBuilder {
      // Use SensorData.newBuilder() to construct.
      private SensorData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private SensorData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final SensorData defaultInstance;
      public static SensorData getDefaultInstance() {
        return defaultInstance;
      }

      public SensorData getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private SensorData(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                recordTime_ = input.readUInt64();
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  valueBool_ = new java.util.ArrayList<java.lang.Boolean>();
                  mutable_bitField0_ |= 0x00000002;
                }
                valueBool_.add(input.readBool());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  valueBool_ = new java.util.ArrayList<java.lang.Boolean>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  valueBool_.add(input.readBool());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  valueInt32_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                valueInt32_.add(input.readInt32());
                break;
              }
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                  valueInt32_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                while (input.getBytesUntilLimit() > 0) {
                  valueInt32_.add(input.readInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  valueInt64_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                valueInt64_.add(input.readInt64());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  valueInt64_ = new java.util.ArrayList<java.lang.Long>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  valueInt64_.add(input.readInt64());
                }
                input.popLimit(limit);
                break;
              }
              case 45: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  valueFloat_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000010;
                }
                valueFloat_.add(input.readFloat());
                break;
              }
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                  valueFloat_ = new java.util.ArrayList<java.lang.Float>();
                  mutable_bitField0_ |= 0x00000010;
                }
                while (input.getBytesUntilLimit() > 0) {
                  valueFloat_.add(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 49: {
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                  valueDouble_ = new java.util.ArrayList<java.lang.Double>();
                  mutable_bitField0_ |= 0x00000020;
                }
                valueDouble_.add(input.readDouble());
                break;
              }
              case 50: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                  valueDouble_ = new java.util.ArrayList<java.lang.Double>();
                  mutable_bitField0_ |= 0x00000020;
                }
                while (input.getBytesUntilLimit() > 0) {
                  valueDouble_.add(input.readDouble());
                }
                input.popLimit(limit);
                break;
              }
              case 58: {
                if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                  valueString_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000040;
                }
                valueString_.add(input.readBytes());
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            valueBool_ = java.util.Collections.unmodifiableList(valueBool_);
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            valueInt32_ = java.util.Collections.unmodifiableList(valueInt32_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            valueInt64_ = java.util.Collections.unmodifiableList(valueInt64_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            valueFloat_ = java.util.Collections.unmodifiableList(valueFloat_);
          }
          if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
            valueDouble_ = java.util.Collections.unmodifiableList(valueDouble_);
          }
          if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
            valueString_ = new com.google.protobuf.UnmodifiableLazyStringList(valueString_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_SensorData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_SensorData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.class, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder.class);
      }

      public static com.google.protobuf.Parser<SensorData> PARSER =
          new com.google.protobuf.AbstractParser<SensorData>() {
        public SensorData parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SensorData(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<SensorData> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint64 record_time = 1;
      public static final int RECORD_TIME_FIELD_NUMBER = 1;
      private long recordTime_;
      /**
       * <code>required uint64 record_time = 1;</code>
       */
      public boolean hasRecordTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 record_time = 1;</code>
       */
      public long getRecordTime() {
        return recordTime_;
      }

      // repeated bool value_bool = 2 [packed = true];
      public static final int VALUE_BOOL_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Boolean> valueBool_;
      /**
       * <code>repeated bool value_bool = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Boolean>
          getValueBoolList() {
        return valueBool_;
      }
      /**
       * <code>repeated bool value_bool = 2 [packed = true];</code>
       */
      public int getValueBoolCount() {
        return valueBool_.size();
      }
      /**
       * <code>repeated bool value_bool = 2 [packed = true];</code>
       */
      public boolean getValueBool(int index) {
        return valueBool_.get(index);
      }
      private int valueBoolMemoizedSerializedSize = -1;

      // repeated int32 value_int32 = 3 [packed = true];
      public static final int VALUE_INT32_FIELD_NUMBER = 3;
      private java.util.List<java.lang.Integer> valueInt32_;
      /**
       * <code>repeated int32 value_int32 = 3 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getValueInt32List() {
        return valueInt32_;
      }
      /**
       * <code>repeated int32 value_int32 = 3 [packed = true];</code>
       */
      public int getValueInt32Count() {
        return valueInt32_.size();
      }
      /**
       * <code>repeated int32 value_int32 = 3 [packed = true];</code>
       */
      public int getValueInt32(int index) {
        return valueInt32_.get(index);
      }
      private int valueInt32MemoizedSerializedSize = -1;

      // repeated int64 value_int64 = 4 [packed = true];
      public static final int VALUE_INT64_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Long> valueInt64_;
      /**
       * <code>repeated int64 value_int64 = 4 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getValueInt64List() {
        return valueInt64_;
      }
      /**
       * <code>repeated int64 value_int64 = 4 [packed = true];</code>
       */
      public int getValueInt64Count() {
        return valueInt64_.size();
      }
      /**
       * <code>repeated int64 value_int64 = 4 [packed = true];</code>
       */
      public long getValueInt64(int index) {
        return valueInt64_.get(index);
      }
      private int valueInt64MemoizedSerializedSize = -1;

      // repeated float value_float = 5 [packed = true];
      public static final int VALUE_FLOAT_FIELD_NUMBER = 5;
      private java.util.List<java.lang.Float> valueFloat_;
      /**
       * <code>repeated float value_float = 5 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getValueFloatList() {
        return valueFloat_;
      }
      /**
       * <code>repeated float value_float = 5 [packed = true];</code>
       */
      public int getValueFloatCount() {
        return valueFloat_.size();
      }
      /**
       * <code>repeated float value_float = 5 [packed = true];</code>
       */
      public float getValueFloat(int index) {
        return valueFloat_.get(index);
      }
      private int valueFloatMemoizedSerializedSize = -1;

      // repeated double value_double = 6 [packed = true];
      public static final int VALUE_DOUBLE_FIELD_NUMBER = 6;
      private java.util.List<java.lang.Double> valueDouble_;
      /**
       * <code>repeated double value_double = 6 [packed = true];</code>
       */
      public java.util.List<java.lang.Double>
          getValueDoubleList() {
        return valueDouble_;
      }
      /**
       * <code>repeated double value_double = 6 [packed = true];</code>
       */
      public int getValueDoubleCount() {
        return valueDouble_.size();
      }
      /**
       * <code>repeated double value_double = 6 [packed = true];</code>
       */
      public double getValueDouble(int index) {
        return valueDouble_.get(index);
      }
      private int valueDoubleMemoizedSerializedSize = -1;

      // repeated string value_string = 7;
      public static final int VALUE_STRING_FIELD_NUMBER = 7;
      private com.google.protobuf.LazyStringList valueString_;
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      public java.util.List<java.lang.String>
          getValueStringList() {
        return valueString_;
      }
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      public int getValueStringCount() {
        return valueString_.size();
      }
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      public java.lang.String getValueString(int index) {
        return valueString_.get(index);
      }
      /**
       * <code>repeated string value_string = 7;</code>
       *
       * <pre>
       * Strings can't be packed, length-delimited
       * </pre>
       */
      public com.google.protobuf.ByteString
          getValueStringBytes(int index) {
        return valueString_.getByteString(index);
      }

      private void initFields() {
        recordTime_ = 0L;
        valueBool_ = java.util.Collections.emptyList();
        valueInt32_ = java.util.Collections.emptyList();
        valueInt64_ = java.util.Collections.emptyList();
        valueFloat_ = java.util.Collections.emptyList();
        valueDouble_ = java.util.Collections.emptyList();
        valueString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasRecordTime()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt64(1, recordTime_);
        }
        if (getValueBoolList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(valueBoolMemoizedSerializedSize);
        }
        for (int i = 0; i < valueBool_.size(); i++) {
          output.writeBoolNoTag(valueBool_.get(i));
        }
        if (getValueInt32List().size() > 0) {
          output.writeRawVarint32(26);
          output.writeRawVarint32(valueInt32MemoizedSerializedSize);
        }
        for (int i = 0; i < valueInt32_.size(); i++) {
          output.writeInt32NoTag(valueInt32_.get(i));
        }
        if (getValueInt64List().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(valueInt64MemoizedSerializedSize);
        }
        for (int i = 0; i < valueInt64_.size(); i++) {
          output.writeInt64NoTag(valueInt64_.get(i));
        }
        if (getValueFloatList().size() > 0) {
          output.writeRawVarint32(42);
          output.writeRawVarint32(valueFloatMemoizedSerializedSize);
        }
        for (int i = 0; i < valueFloat_.size(); i++) {
          output.writeFloatNoTag(valueFloat_.get(i));
        }
        if (getValueDoubleList().size() > 0) {
          output.writeRawVarint32(50);
          output.writeRawVarint32(valueDoubleMemoizedSerializedSize);
        }
        for (int i = 0; i < valueDouble_.size(); i++) {
          output.writeDoubleNoTag(valueDouble_.get(i));
        }
        for (int i = 0; i < valueString_.size(); i++) {
          output.writeBytes(7, valueString_.getByteString(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, recordTime_);
        }
        {
          int dataSize = 0;
          dataSize = 1 * getValueBoolList().size();
          size += dataSize;
          if (!getValueBoolList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          valueBoolMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < valueInt32_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(valueInt32_.get(i));
          }
          size += dataSize;
          if (!getValueInt32List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          valueInt32MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < valueInt64_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeInt64SizeNoTag(valueInt64_.get(i));
          }
          size += dataSize;
          if (!getValueInt64List().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          valueInt64MemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * getValueFloatList().size();
          size += dataSize;
          if (!getValueFloatList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          valueFloatMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 8 * getValueDoubleList().size();
          size += dataSize;
          if (!getValueDoubleList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          valueDoubleMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          for (int i = 0; i < valueString_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeBytesSizeNoTag(valueString_.getByteString(i));
          }
          size += dataSize;
          size += 1 * getValueStringList().size();
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code nervousproto.SensorUpload.SensorData}
       *
       * <pre>
       * This message is used to store the actual sensor data.
       * Ordering, count and meaning of the values is defined by the nervous system.
       * This is not very nice, but protobuf packing makes it efficient either way.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_SensorData_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_SensorData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.class, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder.class);
        }

        // Construct using ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          recordTime_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000001);
          valueBool_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          valueInt32_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          valueInt64_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          valueFloat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          valueDouble_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          valueString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000040);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_SensorData_descriptor;
        }

        public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData getDefaultInstanceForType() {
          return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.getDefaultInstance();
        }

        public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData build() {
          ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData buildPartial() {
          ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData result = new ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.recordTime_ = recordTime_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            valueBool_ = java.util.Collections.unmodifiableList(valueBool_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.valueBool_ = valueBool_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            valueInt32_ = java.util.Collections.unmodifiableList(valueInt32_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.valueInt32_ = valueInt32_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            valueInt64_ = java.util.Collections.unmodifiableList(valueInt64_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.valueInt64_ = valueInt64_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            valueFloat_ = java.util.Collections.unmodifiableList(valueFloat_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.valueFloat_ = valueFloat_;
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            valueDouble_ = java.util.Collections.unmodifiableList(valueDouble_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.valueDouble_ = valueDouble_;
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            valueString_ = new com.google.protobuf.UnmodifiableLazyStringList(
                valueString_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.valueString_ = valueString_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData) {
            return mergeFrom((ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData other) {
          if (other == ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.getDefaultInstance()) return this;
          if (other.hasRecordTime()) {
            setRecordTime(other.getRecordTime());
          }
          if (!other.valueBool_.isEmpty()) {
            if (valueBool_.isEmpty()) {
              valueBool_ = other.valueBool_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureValueBoolIsMutable();
              valueBool_.addAll(other.valueBool_);
            }
            onChanged();
          }
          if (!other.valueInt32_.isEmpty()) {
            if (valueInt32_.isEmpty()) {
              valueInt32_ = other.valueInt32_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureValueInt32IsMutable();
              valueInt32_.addAll(other.valueInt32_);
            }
            onChanged();
          }
          if (!other.valueInt64_.isEmpty()) {
            if (valueInt64_.isEmpty()) {
              valueInt64_ = other.valueInt64_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureValueInt64IsMutable();
              valueInt64_.addAll(other.valueInt64_);
            }
            onChanged();
          }
          if (!other.valueFloat_.isEmpty()) {
            if (valueFloat_.isEmpty()) {
              valueFloat_ = other.valueFloat_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureValueFloatIsMutable();
              valueFloat_.addAll(other.valueFloat_);
            }
            onChanged();
          }
          if (!other.valueDouble_.isEmpty()) {
            if (valueDouble_.isEmpty()) {
              valueDouble_ = other.valueDouble_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureValueDoubleIsMutable();
              valueDouble_.addAll(other.valueDouble_);
            }
            onChanged();
          }
          if (!other.valueString_.isEmpty()) {
            if (valueString_.isEmpty()) {
              valueString_ = other.valueString_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureValueStringIsMutable();
              valueString_.addAll(other.valueString_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasRecordTime()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint64 record_time = 1;
        private long recordTime_ ;
        /**
         * <code>required uint64 record_time = 1;</code>
         */
        public boolean hasRecordTime() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint64 record_time = 1;</code>
         */
        public long getRecordTime() {
          return recordTime_;
        }
        /**
         * <code>required uint64 record_time = 1;</code>
         */
        public Builder setRecordTime(long value) {
          bitField0_ |= 0x00000001;
          recordTime_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required uint64 record_time = 1;</code>
         */
        public Builder clearRecordTime() {
          bitField0_ = (bitField0_ & ~0x00000001);
          recordTime_ = 0L;
          onChanged();
          return this;
        }

        // repeated bool value_bool = 2 [packed = true];
        private java.util.List<java.lang.Boolean> valueBool_ = java.util.Collections.emptyList();
        private void ensureValueBoolIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            valueBool_ = new java.util.ArrayList<java.lang.Boolean>(valueBool_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated bool value_bool = 2 [packed = true];</code>
         */
        public java.util.List<java.lang.Boolean>
            getValueBoolList() {
          return java.util.Collections.unmodifiableList(valueBool_);
        }
        /**
         * <code>repeated bool value_bool = 2 [packed = true];</code>
         */
        public int getValueBoolCount() {
          return valueBool_.size();
        }
        /**
         * <code>repeated bool value_bool = 2 [packed = true];</code>
         */
        public boolean getValueBool(int index) {
          return valueBool_.get(index);
        }
        /**
         * <code>repeated bool value_bool = 2 [packed = true];</code>
         */
        public Builder setValueBool(
            int index, boolean value) {
          ensureValueBoolIsMutable();
          valueBool_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated bool value_bool = 2 [packed = true];</code>
         */
        public Builder addValueBool(boolean value) {
          ensureValueBoolIsMutable();
          valueBool_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated bool value_bool = 2 [packed = true];</code>
         */
        public Builder addAllValueBool(
            java.lang.Iterable<? extends java.lang.Boolean> values) {
          ensureValueBoolIsMutable();
          super.addAll(values, valueBool_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated bool value_bool = 2 [packed = true];</code>
         */
        public Builder clearValueBool() {
          valueBool_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }

        // repeated int32 value_int32 = 3 [packed = true];
        private java.util.List<java.lang.Integer> valueInt32_ = java.util.Collections.emptyList();
        private void ensureValueInt32IsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            valueInt32_ = new java.util.ArrayList<java.lang.Integer>(valueInt32_);
            bitField0_ |= 0x00000004;
           }
        }
        /**
         * <code>repeated int32 value_int32 = 3 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getValueInt32List() {
          return java.util.Collections.unmodifiableList(valueInt32_);
        }
        /**
         * <code>repeated int32 value_int32 = 3 [packed = true];</code>
         */
        public int getValueInt32Count() {
          return valueInt32_.size();
        }
        /**
         * <code>repeated int32 value_int32 = 3 [packed = true];</code>
         */
        public int getValueInt32(int index) {
          return valueInt32_.get(index);
        }
        /**
         * <code>repeated int32 value_int32 = 3 [packed = true];</code>
         */
        public Builder setValueInt32(
            int index, int value) {
          ensureValueInt32IsMutable();
          valueInt32_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 value_int32 = 3 [packed = true];</code>
         */
        public Builder addValueInt32(int value) {
          ensureValueInt32IsMutable();
          valueInt32_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 value_int32 = 3 [packed = true];</code>
         */
        public Builder addAllValueInt32(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureValueInt32IsMutable();
          super.addAll(values, valueInt32_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int32 value_int32 = 3 [packed = true];</code>
         */
        public Builder clearValueInt32() {
          valueInt32_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
          return this;
        }

        // repeated int64 value_int64 = 4 [packed = true];
        private java.util.List<java.lang.Long> valueInt64_ = java.util.Collections.emptyList();
        private void ensureValueInt64IsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            valueInt64_ = new java.util.ArrayList<java.lang.Long>(valueInt64_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated int64 value_int64 = 4 [packed = true];</code>
         */
        public java.util.List<java.lang.Long>
            getValueInt64List() {
          return java.util.Collections.unmodifiableList(valueInt64_);
        }
        /**
         * <code>repeated int64 value_int64 = 4 [packed = true];</code>
         */
        public int getValueInt64Count() {
          return valueInt64_.size();
        }
        /**
         * <code>repeated int64 value_int64 = 4 [packed = true];</code>
         */
        public long getValueInt64(int index) {
          return valueInt64_.get(index);
        }
        /**
         * <code>repeated int64 value_int64 = 4 [packed = true];</code>
         */
        public Builder setValueInt64(
            int index, long value) {
          ensureValueInt64IsMutable();
          valueInt64_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int64 value_int64 = 4 [packed = true];</code>
         */
        public Builder addValueInt64(long value) {
          ensureValueInt64IsMutable();
          valueInt64_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int64 value_int64 = 4 [packed = true];</code>
         */
        public Builder addAllValueInt64(
            java.lang.Iterable<? extends java.lang.Long> values) {
          ensureValueInt64IsMutable();
          super.addAll(values, valueInt64_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated int64 value_int64 = 4 [packed = true];</code>
         */
        public Builder clearValueInt64() {
          valueInt64_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
          return this;
        }

        // repeated float value_float = 5 [packed = true];
        private java.util.List<java.lang.Float> valueFloat_ = java.util.Collections.emptyList();
        private void ensureValueFloatIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            valueFloat_ = new java.util.ArrayList<java.lang.Float>(valueFloat_);
            bitField0_ |= 0x00000010;
           }
        }
        /**
         * <code>repeated float value_float = 5 [packed = true];</code>
         */
        public java.util.List<java.lang.Float>
            getValueFloatList() {
          return java.util.Collections.unmodifiableList(valueFloat_);
        }
        /**
         * <code>repeated float value_float = 5 [packed = true];</code>
         */
        public int getValueFloatCount() {
          return valueFloat_.size();
        }
        /**
         * <code>repeated float value_float = 5 [packed = true];</code>
         */
        public float getValueFloat(int index) {
          return valueFloat_.get(index);
        }
        /**
         * <code>repeated float value_float = 5 [packed = true];</code>
         */
        public Builder setValueFloat(
            int index, float value) {
          ensureValueFloatIsMutable();
          valueFloat_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float value_float = 5 [packed = true];</code>
         */
        public Builder addValueFloat(float value) {
          ensureValueFloatIsMutable();
          valueFloat_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float value_float = 5 [packed = true];</code>
         */
        public Builder addAllValueFloat(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureValueFloatIsMutable();
          super.addAll(values, valueFloat_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float value_float = 5 [packed = true];</code>
         */
        public Builder clearValueFloat() {
          valueFloat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
          return this;
        }

        // repeated double value_double = 6 [packed = true];
        private java.util.List<java.lang.Double> valueDouble_ = java.util.Collections.emptyList();
        private void ensureValueDoubleIsMutable() {
          if (!((bitField0_ & 0x00000020) == 0x00000020)) {
            valueDouble_ = new java.util.ArrayList<java.lang.Double>(valueDouble_);
            bitField0_ |= 0x00000020;
           }
        }
        /**
         * <code>repeated double value_double = 6 [packed = true];</code>
         */
        public java.util.List<java.lang.Double>
            getValueDoubleList() {
          return java.util.Collections.unmodifiableList(valueDouble_);
        }
        /**
         * <code>repeated double value_double = 6 [packed = true];</code>
         */
        public int getValueDoubleCount() {
          return valueDouble_.size();
        }
        /**
         * <code>repeated double value_double = 6 [packed = true];</code>
         */
        public double getValueDouble(int index) {
          return valueDouble_.get(index);
        }
        /**
         * <code>repeated double value_double = 6 [packed = true];</code>
         */
        public Builder setValueDouble(
            int index, double value) {
          ensureValueDoubleIsMutable();
          valueDouble_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated double value_double = 6 [packed = true];</code>
         */
        public Builder addValueDouble(double value) {
          ensureValueDoubleIsMutable();
          valueDouble_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated double value_double = 6 [packed = true];</code>
         */
        public Builder addAllValueDouble(
            java.lang.Iterable<? extends java.lang.Double> values) {
          ensureValueDoubleIsMutable();
          super.addAll(values, valueDouble_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated double value_double = 6 [packed = true];</code>
         */
        public Builder clearValueDouble() {
          valueDouble_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
          return this;
        }

        // repeated string value_string = 7;
        private com.google.protobuf.LazyStringList valueString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureValueStringIsMutable() {
          if (!((bitField0_ & 0x00000040) == 0x00000040)) {
            valueString_ = new com.google.protobuf.LazyStringArrayList(valueString_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public java.util.List<java.lang.String>
            getValueStringList() {
          return java.util.Collections.unmodifiableList(valueString_);
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public int getValueStringCount() {
          return valueString_.size();
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public java.lang.String getValueString(int index) {
          return valueString_.get(index);
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public com.google.protobuf.ByteString
            getValueStringBytes(int index) {
          return valueString_.getByteString(index);
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public Builder setValueString(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureValueStringIsMutable();
          valueString_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public Builder addValueString(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureValueStringIsMutable();
          valueString_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public Builder addAllValueString(
            java.lang.Iterable<java.lang.String> values) {
          ensureValueStringIsMutable();
          super.addAll(values, valueString_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public Builder clearValueString() {
          valueString_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string value_string = 7;</code>
         *
         * <pre>
         * Strings can't be packed, length-delimited
         * </pre>
         */
        public Builder addValueStringBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureValueStringIsMutable();
          valueString_.add(value);
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:nervousproto.SensorUpload.SensorData)
      }

      static {
        defaultInstance = new SensorData(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:nervousproto.SensorUpload.SensorData)
    }

    private int bitField0_;
    // required uint64 huuid = 1;
    public static final int HUUID_FIELD_NUMBER = 1;
    private long huuid_;
    /**
     * <code>required uint64 huuid = 1;</code>
     *
     * <pre>
     * Unique application UUID
     * High bits
     * </pre>
     */
    public boolean hasHuuid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 huuid = 1;</code>
     *
     * <pre>
     * Unique application UUID
     * High bits
     * </pre>
     */
    public long getHuuid() {
      return huuid_;
    }

    // required uint64 luuid = 2;
    public static final int LUUID_FIELD_NUMBER = 2;
    private long luuid_;
    /**
     * <code>required uint64 luuid = 2;</code>
     *
     * <pre>
     * Low bits
     * </pre>
     */
    public boolean hasLuuid() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 luuid = 2;</code>
     *
     * <pre>
     * Low bits
     * </pre>
     */
    public long getLuuid() {
      return luuid_;
    }

    // required uint64 upload_time = 3;
    public static final int UPLOAD_TIME_FIELD_NUMBER = 3;
    private long uploadTime_;
    /**
     * <code>required uint64 upload_time = 3;</code>
     *
     * <pre>
     * Timestamp of the upload. Used for router-side time correction
     * </pre>
     */
    public boolean hasUploadTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint64 upload_time = 3;</code>
     *
     * <pre>
     * Timestamp of the upload. Used for router-side time correction
     * </pre>
     */
    public long getUploadTime() {
      return uploadTime_;
    }

    // required uint64 sensor_id = 4;
    public static final int SENSOR_ID_FIELD_NUMBER = 4;
    private long sensorId_;
    /**
     * <code>required uint64 sensor_id = 4;</code>
     *
     * <pre>
     * Sensor Type
     * </pre>
     */
    public boolean hasSensorId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint64 sensor_id = 4;</code>
     *
     * <pre>
     * Sensor Type
     * </pre>
     */
    public long getSensorId() {
      return sensorId_;
    }

    // repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;
    public static final int SENSOR_VALUES_FIELD_NUMBER = 5;
    private java.util.List<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData> sensorValues_;
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    public java.util.List<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData> getSensorValuesList() {
      return sensorValues_;
    }
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    public java.util.List<? extends ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder> 
        getSensorValuesOrBuilderList() {
      return sensorValues_;
    }
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    public int getSensorValuesCount() {
      return sensorValues_.size();
    }
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData getSensorValues(int index) {
      return sensorValues_.get(index);
    }
    /**
     * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
     */
    public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder getSensorValuesOrBuilder(
        int index) {
      return sensorValues_.get(index);
    }

    private void initFields() {
      huuid_ = 0L;
      luuid_ = 0L;
      uploadTime_ = 0L;
      sensorId_ = 0L;
      sensorValues_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasHuuid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLuuid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasUploadTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSensorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSensorValuesCount(); i++) {
        if (!getSensorValues(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, huuid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, luuid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, uploadTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(4, sensorId_);
      }
      for (int i = 0; i < sensorValues_.size(); i++) {
        output.writeMessage(5, sensorValues_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, huuid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, luuid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, uploadTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, sensorId_);
      }
      for (int i = 0; i < sensorValues_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, sensorValues_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code nervousproto.SensorUpload}
     *
     * <pre>
     * This message is used to upload sensor data for collection purposes to a nervous router
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUploadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.class, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.Builder.class);
      }

      // Construct using ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSensorValuesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        huuid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        luuid_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        uploadTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        sensorId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (sensorValuesBuilder_ == null) {
          sensorValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          sensorValuesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.internal_static_nervousproto_SensorUpload_descriptor;
      }

      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload getDefaultInstanceForType() {
        return ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.getDefaultInstance();
      }

      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload build() {
        ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload buildPartial() {
        ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload result = new ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.huuid_ = huuid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.luuid_ = luuid_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.uploadTime_ = uploadTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.sensorId_ = sensorId_;
        if (sensorValuesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            sensorValues_ = java.util.Collections.unmodifiableList(sensorValues_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.sensorValues_ = sensorValues_;
        } else {
          result.sensorValues_ = sensorValuesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload) {
          return mergeFrom((ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload other) {
        if (other == ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.getDefaultInstance()) return this;
        if (other.hasHuuid()) {
          setHuuid(other.getHuuid());
        }
        if (other.hasLuuid()) {
          setLuuid(other.getLuuid());
        }
        if (other.hasUploadTime()) {
          setUploadTime(other.getUploadTime());
        }
        if (other.hasSensorId()) {
          setSensorId(other.getSensorId());
        }
        if (sensorValuesBuilder_ == null) {
          if (!other.sensorValues_.isEmpty()) {
            if (sensorValues_.isEmpty()) {
              sensorValues_ = other.sensorValues_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureSensorValuesIsMutable();
              sensorValues_.addAll(other.sensorValues_);
            }
            onChanged();
          }
        } else {
          if (!other.sensorValues_.isEmpty()) {
            if (sensorValuesBuilder_.isEmpty()) {
              sensorValuesBuilder_.dispose();
              sensorValuesBuilder_ = null;
              sensorValues_ = other.sensorValues_;
              bitField0_ = (bitField0_ & ~0x00000010);
              sensorValuesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSensorValuesFieldBuilder() : null;
            } else {
              sensorValuesBuilder_.addAllMessages(other.sensorValues_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHuuid()) {
          
          return false;
        }
        if (!hasLuuid()) {
          
          return false;
        }
        if (!hasUploadTime()) {
          
          return false;
        }
        if (!hasSensorId()) {
          
          return false;
        }
        for (int i = 0; i < getSensorValuesCount(); i++) {
          if (!getSensorValues(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 huuid = 1;
      private long huuid_ ;
      /**
       * <code>required uint64 huuid = 1;</code>
       *
       * <pre>
       * Unique application UUID
       * High bits
       * </pre>
       */
      public boolean hasHuuid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 huuid = 1;</code>
       *
       * <pre>
       * Unique application UUID
       * High bits
       * </pre>
       */
      public long getHuuid() {
        return huuid_;
      }
      /**
       * <code>required uint64 huuid = 1;</code>
       *
       * <pre>
       * Unique application UUID
       * High bits
       * </pre>
       */
      public Builder setHuuid(long value) {
        bitField0_ |= 0x00000001;
        huuid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 huuid = 1;</code>
       *
       * <pre>
       * Unique application UUID
       * High bits
       * </pre>
       */
      public Builder clearHuuid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        huuid_ = 0L;
        onChanged();
        return this;
      }

      // required uint64 luuid = 2;
      private long luuid_ ;
      /**
       * <code>required uint64 luuid = 2;</code>
       *
       * <pre>
       * Low bits
       * </pre>
       */
      public boolean hasLuuid() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 luuid = 2;</code>
       *
       * <pre>
       * Low bits
       * </pre>
       */
      public long getLuuid() {
        return luuid_;
      }
      /**
       * <code>required uint64 luuid = 2;</code>
       *
       * <pre>
       * Low bits
       * </pre>
       */
      public Builder setLuuid(long value) {
        bitField0_ |= 0x00000002;
        luuid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 luuid = 2;</code>
       *
       * <pre>
       * Low bits
       * </pre>
       */
      public Builder clearLuuid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        luuid_ = 0L;
        onChanged();
        return this;
      }

      // required uint64 upload_time = 3;
      private long uploadTime_ ;
      /**
       * <code>required uint64 upload_time = 3;</code>
       *
       * <pre>
       * Timestamp of the upload. Used for router-side time correction
       * </pre>
       */
      public boolean hasUploadTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint64 upload_time = 3;</code>
       *
       * <pre>
       * Timestamp of the upload. Used for router-side time correction
       * </pre>
       */
      public long getUploadTime() {
        return uploadTime_;
      }
      /**
       * <code>required uint64 upload_time = 3;</code>
       *
       * <pre>
       * Timestamp of the upload. Used for router-side time correction
       * </pre>
       */
      public Builder setUploadTime(long value) {
        bitField0_ |= 0x00000004;
        uploadTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 upload_time = 3;</code>
       *
       * <pre>
       * Timestamp of the upload. Used for router-side time correction
       * </pre>
       */
      public Builder clearUploadTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        uploadTime_ = 0L;
        onChanged();
        return this;
      }

      // required uint64 sensor_id = 4;
      private long sensorId_ ;
      /**
       * <code>required uint64 sensor_id = 4;</code>
       *
       * <pre>
       * Sensor Type
       * </pre>
       */
      public boolean hasSensorId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint64 sensor_id = 4;</code>
       *
       * <pre>
       * Sensor Type
       * </pre>
       */
      public long getSensorId() {
        return sensorId_;
      }
      /**
       * <code>required uint64 sensor_id = 4;</code>
       *
       * <pre>
       * Sensor Type
       * </pre>
       */
      public Builder setSensorId(long value) {
        bitField0_ |= 0x00000008;
        sensorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 sensor_id = 4;</code>
       *
       * <pre>
       * Sensor Type
       * </pre>
       */
      public Builder clearSensorId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        sensorId_ = 0L;
        onChanged();
        return this;
      }

      // repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;
      private java.util.List<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData> sensorValues_ =
        java.util.Collections.emptyList();
      private void ensureSensorValuesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          sensorValues_ = new java.util.ArrayList<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData>(sensorValues_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder> sensorValuesBuilder_;

      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public java.util.List<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData> getSensorValuesList() {
        if (sensorValuesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sensorValues_);
        } else {
          return sensorValuesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public int getSensorValuesCount() {
        if (sensorValuesBuilder_ == null) {
          return sensorValues_.size();
        } else {
          return sensorValuesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData getSensorValues(int index) {
        if (sensorValuesBuilder_ == null) {
          return sensorValues_.get(index);
        } else {
          return sensorValuesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder setSensorValues(
          int index, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData value) {
        if (sensorValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorValuesIsMutable();
          sensorValues_.set(index, value);
          onChanged();
        } else {
          sensorValuesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder setSensorValues(
          int index, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder builderForValue) {
        if (sensorValuesBuilder_ == null) {
          ensureSensorValuesIsMutable();
          sensorValues_.set(index, builderForValue.build());
          onChanged();
        } else {
          sensorValuesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder addSensorValues(ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData value) {
        if (sensorValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorValuesIsMutable();
          sensorValues_.add(value);
          onChanged();
        } else {
          sensorValuesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder addSensorValues(
          int index, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData value) {
        if (sensorValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorValuesIsMutable();
          sensorValues_.add(index, value);
          onChanged();
        } else {
          sensorValuesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder addSensorValues(
          ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder builderForValue) {
        if (sensorValuesBuilder_ == null) {
          ensureSensorValuesIsMutable();
          sensorValues_.add(builderForValue.build());
          onChanged();
        } else {
          sensorValuesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder addSensorValues(
          int index, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder builderForValue) {
        if (sensorValuesBuilder_ == null) {
          ensureSensorValuesIsMutable();
          sensorValues_.add(index, builderForValue.build());
          onChanged();
        } else {
          sensorValuesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder addAllSensorValues(
          java.lang.Iterable<? extends ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData> values) {
        if (sensorValuesBuilder_ == null) {
          ensureSensorValuesIsMutable();
          super.addAll(values, sensorValues_);
          onChanged();
        } else {
          sensorValuesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder clearSensorValues() {
        if (sensorValuesBuilder_ == null) {
          sensorValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          sensorValuesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public Builder removeSensorValues(int index) {
        if (sensorValuesBuilder_ == null) {
          ensureSensorValuesIsMutable();
          sensorValues_.remove(index);
          onChanged();
        } else {
          sensorValuesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder getSensorValuesBuilder(
          int index) {
        return getSensorValuesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder getSensorValuesOrBuilder(
          int index) {
        if (sensorValuesBuilder_ == null) {
          return sensorValues_.get(index);  } else {
          return sensorValuesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public java.util.List<? extends ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder> 
           getSensorValuesOrBuilderList() {
        if (sensorValuesBuilder_ != null) {
          return sensorValuesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sensorValues_);
        }
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder addSensorValuesBuilder() {
        return getSensorValuesFieldBuilder().addBuilder(
            ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.getDefaultInstance());
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder addSensorValuesBuilder(
          int index) {
        return getSensorValuesFieldBuilder().addBuilder(
            index, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.getDefaultInstance());
      }
      /**
       * <code>repeated .nervousproto.SensorUpload.SensorData sensor_values = 5;</code>
       */
      public java.util.List<ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder> 
           getSensorValuesBuilderList() {
        return getSensorValuesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder> 
          getSensorValuesFieldBuilder() {
        if (sensorValuesBuilder_ == null) {
          sensorValuesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData.Builder, ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorDataOrBuilder>(
                  sensorValues_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          sensorValues_ = null;
        }
        return sensorValuesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:nervousproto.SensorUpload)
    }

    static {
      defaultInstance = new SensorUpload(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:nervousproto.SensorUpload)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nervousproto_SensorUpload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nervousproto_SensorUpload_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_nervousproto_SensorUpload_SensorData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_nervousproto_SensorUpload_SensorData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022sensorupload.proto\022\014nervousproto\"\311\002\n\014S" +
      "ensorUpload\022\r\n\005huuid\030\001 \002(\004\022\r\n\005luuid\030\002 \002(" +
      "\004\022\023\n\013upload_time\030\003 \002(\004\022\021\n\tsensor_id\030\004 \002(" +
      "\004\022<\n\rsensor_values\030\005 \003(\0132%.nervousproto." +
      "SensorUpload.SensorData\032\264\001\n\nSensorData\022\023" +
      "\n\013record_time\030\001 \002(\004\022\026\n\nvalue_bool\030\002 \003(\010B" +
      "\002\020\001\022\027\n\013value_int32\030\003 \003(\005B\002\020\001\022\027\n\013value_in" +
      "t64\030\004 \003(\003B\002\020\001\022\027\n\013value_float\030\005 \003(\002B\002\020\001\022\030" +
      "\n\014value_double\030\006 \003(\001B\002\020\001\022\024\n\014value_string" +
      "\030\007 \003(\tB7\n!ch.ethz.soms.nervous.nervouspr",
      "otoB\022SensorUploadProtos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_nervousproto_SensorUpload_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_nervousproto_SensorUpload_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nervousproto_SensorUpload_descriptor,
              new java.lang.String[] { "Huuid", "Luuid", "UploadTime", "SensorId", "SensorValues", });
          internal_static_nervousproto_SensorUpload_SensorData_descriptor =
            internal_static_nervousproto_SensorUpload_descriptor.getNestedTypes().get(0);
          internal_static_nervousproto_SensorUpload_SensorData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_nervousproto_SensorUpload_SensorData_descriptor,
              new java.lang.String[] { "RecordTime", "ValueBool", "ValueInt32", "ValueInt64", "ValueFloat", "ValueDouble", "ValueString", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
